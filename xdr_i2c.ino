/*
 *  XDR-I2C 2013-01-06
 *  Copyright (C) 2012-2013  Konrad Kosmatka
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 */

#define IR 0
/* If you have an IR diode, change this to 1 */

#include <Arduino.h>
#include <I2cMaster.h>
#include <avr/pgmspace.h>

#define RDS_PIN 2
#define IR_PIN 3
#define RESET_PIN 4
#define SDA_PIN A4
#define SCL_PIN A5

#define PI_BUFFER_SIZE 64
#define SERIAL_BUFFER_SIZE 16
#define DSP_INIT 0

#define MODE_FM 0
#define MODE_AM 1

char buff[SERIAL_BUFFER_SIZE];
uint8_t buff_pos = 0;

int8_t current_filter = -1;
uint8_t mode;

uint8_t CONTROL = 0x00;
uint16_t PLL;
uint8_t DAA = 0x00;
uint8_t AGC = 0xC8;
uint8_t BAND;

uint16_t pi_buffer[PI_BUFFER_SIZE];
uint8_t rds_buffer[4], rds_status_buffer, pi_pos = 0;
bool pi_checked = false;

uint32_t timer = 0, rds_timer = 0;

bool spectrum_flag = false;
uint32_t spectrum_start = 0, spectrum_end = 0;

const uint8_t FM0[] PROGMEM = {0xFF, 0xFD, 0xFF, 0xF9, 0xFF, 0xF4, 0xFF, 0xF4, 0xFF, 0xFA, 0x00, 0x0A, 0x00, 0x20, 0x00, 0x34, 0x00, 0x3A, 0x00, 0x27, 0xFF, 0xF6, 0xFF, 0xB1, 0xFF, 0x6F, 0xFF, 0x4F, 0xFF, 0x6E, 0xFF, 0xDA, 0x00, 0x82, 0x01, 0x35, 0x01, 0xAB, 0x01, 0x9C, 0x00, 0xDD, 0xFF, 0x7C, 0xFD, 0xCC, 0xFC, 0x5D, 0xFB, 0xDC, 0xFC, 0xDE, 0xFF, 0xAF, 0x04, 0x2B, 0x09, 0xB3, 0x0F, 0x4E, 0x13, 0xDF, 0x16, 0x6F};
const uint8_t FM1[] PROGMEM = {0xFF, 0xFB, 0xFF, 0xFA, 0xFF, 0xFF, 0x00, 0x0B, 0x00, 0x17, 0x00, 0x1A, 0x00, 0x09, 0xFF, 0xE5, 0xFF, 0xC0, 0xFF, 0xB5, 0xFF, 0xDB, 0x00, 0x2F, 0x00, 0x8A, 0x00, 0xAF, 0x00, 0x6C, 0xFF, 0xC4, 0xFF, 0x00, 0xFE, 0x99, 0xFE, 0xF8, 0x00, 0x28, 0x01, 0xB0, 0x02, 0xB0, 0x02, 0x4E, 0x00, 0x44, 0xFD, 0x3A, 0xFA, 0xBA, 0xFA, 0x9D, 0xFE, 0x30, 0x05, 0x6D, 0x0E, 0xBD, 0x17, 0x6B, 0x1C, 0xA6};
const uint8_t FM2[] PROGMEM = {0xFF, 0xFD, 0x00, 0x03, 0x00, 0x0C, 0x00, 0x0E, 0x00, 0x01, 0xFF, 0xE8, 0xFF, 0xD8, 0xFF, 0xEA, 0x00, 0x1F, 0x00, 0x52, 0x00, 0x4B, 0xFF, 0xF5, 0xFF, 0x7F, 0xFF, 0x54, 0xFF, 0xBE, 0x00, 0x95, 0x01, 0x34, 0x00, 0xEB, 0xFF, 0xA6, 0xFE, 0x3C, 0xFD, 0xF5, 0xFF, 0x82, 0x02, 0x1C, 0x03, 0xB7, 0x02, 0x6E, 0xFE, 0x3F, 0xF9, 0xCE, 0xF9, 0x31, 0xFF, 0x57, 0x0B, 0x9F, 0x19, 0x7E, 0x22, 0xA8};
const uint8_t FM3[] PROGMEM = {0x00, 0x02, 0x00, 0x08, 0x00, 0x06, 0xFF, 0xF7, 0xFF, 0xE9, 0xFF, 0xF3, 0x00, 0x19, 0x00, 0x34, 0x00, 0x14, 0xFF, 0xC6, 0xFF, 0x9D, 0xFF, 0xE7, 0x00, 0x75, 0x00, 0xAA, 0x00, 0x15, 0xFF, 0x26, 0xFE, 0xF1, 0x00, 0x04, 0x01, 0x7B, 0x01, 0x9C, 0xFF, 0xBC, 0xFD, 0x7F, 0xFD, 0x9B, 0x00, 0xD2, 0x04, 0x46, 0x03, 0xA6, 0xFD, 0xE5, 0xF7, 0xE3, 0xF9, 0x79, 0x06, 0x7F, 0x19, 0xF6, 0x28, 0x6D};
const uint8_t FM4[] PROGMEM = {0x00, 0x05, 0x00, 0x03, 0xFF, 0xF7, 0xFF, 0xF1, 0x00, 0x04, 0x00, 0x1F, 0x00, 0x12, 0xFF, 0xDB, 0xFF, 0xC5, 0x00, 0x0C, 0x00, 0x65, 0x00, 0x3C, 0xFF, 0x98, 0xFF, 0x59, 0x00, 0x19, 0x00, 0xFF, 0x00, 0x9C, 0xFF, 0x10, 0xFE, 0x77, 0x00, 0x28, 0x02, 0x3A, 0x01, 0x6E, 0xFD, 0xFE, 0xFC, 0x86, 0x00, 0x37, 0x05, 0x22, 0x03, 0xA6, 0xFA, 0xFA, 0xF5, 0xCA, 0x00, 0x40, 0x18, 0xCE, 0x2D, 0xE9};
const uint8_t FM5[] PROGMEM = {0x00, 0x03, 0xFF, 0xFB, 0xFF, 0xF6, 0x00, 0x07, 0x00, 0x16, 0xFF, 0xFC, 0xFF, 0xD7, 0xFF, 0xF7, 0x00, 0x3F, 0x00, 0x27, 0xFF, 0xAD, 0xFF, 0xA7, 0x00, 0x5A, 0x00, 0xA3, 0xFF, 0xBA, 0xFE, 0xFF, 0x00, 0x05, 0x01, 0x68, 0x00, 0x7A, 0xFE, 0x3C, 0xFE, 0xB7, 0x01, 0xF8, 0x02, 0x7A, 0xFE, 0x2A, 0xFB, 0xDC, 0x01, 0x1C, 0x06, 0x85, 0x00, 0xCB, 0xF5, 0x84, 0xF9, 0xF5, 0x16, 0x16, 0x33, 0x13};
const uint8_t FM6[] PROGMEM = {0xFF, 0xFE, 0xFF, 0xF8, 0x00, 0x04, 0x00, 0x10, 0xFF, 0xF7, 0xFF, 0xE3, 0x00, 0x10, 0x00, 0x30, 0xFF, 0xE3, 0xFF, 0xB5, 0x00, 0x2F, 0x00, 0x6F, 0xFF, 0xB7, 0xFF, 0x60, 0x00, 0x6F, 0x00, 0xDF, 0xFF, 0x5C, 0xFE, 0xCF, 0x00, 0xEE, 0x01, 0x9C, 0xFE, 0xAC, 0xFD, 0xD6, 0x01, 0xE7, 0x02, 0xF0, 0xFD, 0x3A, 0xFB, 0xE5, 0x04, 0x3C, 0x06, 0x2E, 0xF8, 0xBF, 0xF4, 0xB6, 0x11, 0xFB, 0x37, 0xE1};
const uint8_t FM7[] PROGMEM = {0xFF, 0xFB, 0x00, 0x00, 0x00, 0x0C, 0xFF, 0xFB, 0xFF, 0xEB, 0x00, 0x13, 0x00, 0x1B, 0xFF, 0xD3, 0xFF, 0xE9, 0x00, 0x52, 0xFF, 0xFF, 0xFF, 0x85, 0x00, 0x38, 0x00, 0x9C, 0xFF, 0x6C, 0xFF, 0x63, 0x01, 0x14, 0x00, 0x66, 0xFE, 0x57, 0x00, 0x28, 0x02, 0x37, 0xFE, 0xD8, 0xFD, 0x72, 0x02, 0xB2, 0x02, 0x6E, 0xFB, 0x16, 0xFE, 0x9A, 0x08, 0x37, 0xFE, 0x67, 0xF1, 0x6A, 0x0C, 0xBF, 0x3C, 0x4A};
const uint8_t FM8[] PROGMEM = {0xFF, 0xFC, 0x00, 0x07, 0x00, 0x01, 0xFF, 0xEF, 0x00, 0x0D, 0x00, 0x12, 0xFF, 0xD9, 0x00, 0x04, 0x00, 0x3D, 0xFF, 0xC6, 0xFF, 0xD4, 0x00, 0x7D, 0xFF, 0xDA, 0xFF, 0x69, 0x00, 0xB3, 0x00, 0x46, 0xFE, 0xCC, 0x00, 0x97, 0x01, 0x30, 0xFE, 0x3C, 0xFF, 0xC9, 0x02, 0x99, 0xFE, 0x34, 0xFD, 0xD9, 0x04, 0x46, 0xFF, 0x8E, 0xFA, 0x13, 0x05, 0xCC, 0x04, 0x97, 0xF0, 0xA5, 0x06, 0xB5, 0x40, 0x48};
const uint8_t FM9[] PROGMEM = {0x00, 0x01, 0x00, 0x06, 0xFF, 0xF5, 0x00, 0x03, 0x00, 0x12, 0xFF, 0xE3, 0x00, 0x07, 0x00, 0x29, 0xFF, 0xC2, 0x00, 0x0C, 0x00, 0x51, 0xFF, 0x8C, 0x00, 0x13, 0x00, 0x93, 0xFF, 0x37, 0x00, 0x1C, 0x00, 0xFB, 0xFE, 0xB5, 0x00, 0x25, 0x01, 0x9C, 0xFD, 0xF0, 0x00, 0x2E, 0x02, 0xA2, 0xFC, 0xAD, 0x00, 0x37, 0x04, 0x80, 0xFA, 0x3C, 0x00, 0x3D, 0x09, 0x3F, 0xF2, 0x87, 0x00, 0x40, 0x43, 0xD2};
const uint8_t FM10[] PROGMEM = {0x00, 0x05, 0xFF, 0xFD, 0xFF, 0xFA, 0x00, 0x11, 0xFF, 0xEF, 0xFF, 0xFD, 0x00, 0x22, 0xFF, 0xCE, 0x00, 0x1A, 0x00, 0x27, 0xFF, 0x9B, 0x00, 0x61, 0x00, 0x00, 0xFF, 0x72, 0x00, 0xD7, 0xFF, 0x87, 0xFF, 0x87, 0x01, 0x5D, 0xFE, 0xA0, 0x00, 0x28, 0x01, 0xA7, 0xFD, 0x55, 0x01, 0xB0, 0x01, 0x2E, 0xFB, 0xDC, 0x04, 0x9E, 0xFE, 0xF4, 0xFA, 0x8D, 0x0A, 0xD0, 0xF6, 0xBD, 0xF9, 0xC7, 0x46, 0xE2};
const uint8_t FM11[] PROGMEM = {0x00, 0x04, 0xFF, 0xF8, 0x00, 0x08, 0xFF, 0xFF, 0xFF, 0xF2, 0x00, 0x1F, 0xFF, 0xDD, 0x00, 0x11, 0x00, 0x19, 0xFF, 0xB5, 0x00, 0x63, 0xFF, 0xBA, 0xFF, 0xED, 0x00, 0x89, 0xFF, 0x25, 0x00, 0xC6, 0xFF, 0xD4, 0xFF, 0x3A, 0x01, 0x9B, 0xFE, 0x3C, 0x00, 0xE9, 0x00, 0xD1, 0xFD, 0x4C, 0x03, 0xAB, 0xFD, 0x3A, 0xFF, 0xC7, 0x04, 0x80, 0xF7, 0xD1, 0x08, 0xC4, 0xFC, 0x8D, 0xF3, 0xB2, 0x49, 0x73};
const uint8_t FM12[] PROGMEM = {0x00, 0x00, 0xFF, 0xFC, 0x00, 0x0A, 0xFF, 0xEF, 0x00, 0x14, 0xFF, 0xF2, 0xFF, 0xFC, 0x00, 0x1F, 0xFF, 0xC2, 0x00, 0x52, 0xFF, 0xB3, 0x00, 0x25, 0x00, 0x26, 0xFF, 0x7C, 0x00, 0xD6, 0xFF, 0x09, 0x00, 0xC4, 0xFF, 0xCF, 0xFF, 0x54, 0x01, 0x9C, 0xFD, 0xB6, 0x02, 0x5C, 0xFE, 0x6D, 0xFF, 0xE4, 0x02, 0x6E, 0xFB, 0x2D, 0x06, 0x7D, 0xF9, 0x85, 0x03, 0xCA, 0x02, 0xF6, 0xEE, 0x63, 0x4B, 0x7F};
const uint8_t FM13[] PROGMEM = {0xFF, 0xFB, 0x00, 0x05, 0xFF, 0xFC, 0xFF, 0xFF, 0x00, 0x0A, 0xFF, 0xE9, 0x00, 0x26, 0xFF, 0xCC, 0x00, 0x3D, 0xFF, 0xC6, 0x00, 0x27, 0xFF, 0xFF, 0xFF, 0xC8, 0x00, 0x7F, 0xFF, 0x38, 0x01, 0x05, 0xFE, 0xDD, 0x01, 0x11, 0xFF, 0x41, 0x00, 0x28, 0x00, 0xAF, 0xFE, 0x4C, 0x02, 0xC5, 0xFC, 0x4D, 0x04, 0x46, 0xFB, 0xC1, 0x03, 0x59, 0xFE, 0xBC, 0xFD, 0x8C, 0x08, 0xDC, 0xEA, 0x2F, 0x4D, 0x05};
const uint8_t FM14[] PROGMEM = {0xFF, 0xFB, 0x00, 0x08, 0xFF, 0xF4, 0x00, 0x11, 0xFF, 0xEA, 0x00, 0x1A, 0xFF, 0xE3, 0x00, 0x1D, 0xFF, 0xE9, 0x00, 0x0C, 0x00, 0x07, 0xFF, 0xDC, 0x00, 0x49, 0xFF, 0x87, 0x00, 0xB1, 0xFF, 0x12, 0x01, 0x2E, 0xFE, 0x94, 0x01, 0xA0, 0xFE, 0x3C, 0x01, 0xD0, 0xFE, 0x47, 0x01, 0x75, 0xFF, 0x07, 0x00, 0x37, 0x00, 0xE4, 0xFD, 0x8F, 0x04, 0xA3, 0xF8, 0x20, 0x0D, 0x3A, 0xE7, 0x5A, 0x4E, 0x00};
const uint8_t FM15[] PROGMEM = {0x00, 0x00, 0x00, 0x01, 0xFF, 0xFE, 0x00, 0x03, 0xFF, 0xFA, 0x00, 0x09, 0xFF, 0xF2, 0x00, 0x14, 0xFF, 0xE4, 0x00, 0x27, 0xFF, 0xCC, 0x00, 0x45, 0xFF, 0xA6, 0x00, 0x73, 0xFF, 0x6E, 0x00, 0xB6, 0xFF, 0x1E, 0x01, 0x16, 0xFE, 0xAD, 0x01, 0x9C, 0xFE, 0x0E, 0x02, 0x59, 0xFD, 0x2C, 0x03, 0x6A, 0xFB, 0xDC, 0x05, 0x12, 0xF9, 0xB3, 0x08, 0x07, 0xF5, 0x56, 0x0F, 0x4E, 0xE6, 0x12, 0x4E, 0x6F};

const uint8_t AM0[] PROGMEM = {0xFF, 0xFE, 0xFF, 0xFB, 0xFF, 0xF7, 0xFF, 0xF1, 0xFF, 0xE9, 0xFF, 0xE0, 0xFF, 0xD5, 0xFF, 0xCA, 0xFF, 0xBE, 0xFF, 0xB5, 0xFF, 0xAF, 0xFF, 0xAF, 0xFF, 0xB6, 0xFF, 0xC8, 0xFF, 0xE7, 0x00, 0x15, 0x00, 0x54, 0x00, 0xA5, 0x01, 0x09, 0x01, 0x7F, 0x02, 0x07, 0x02, 0x9C, 0x03, 0x3E, 0x03, 0xE6, 0x04, 0x90, 0x05, 0x36, 0x05, 0xD3, 0x06, 0x61, 0x06, 0xDA, 0x07, 0x39, 0x07, 0x7B, 0x07, 0x9C};
const uint8_t AM1[] PROGMEM = {0x00, 0x02, 0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFB, 0xFF, 0xF5, 0xFF, 0xEB, 0xFF, 0xDE, 0xFF, 0xCF, 0xFF, 0xBD, 0xFF, 0xA9, 0xFF, 0x97, 0xFF, 0x87, 0xFF, 0x7D, 0xFF, 0x7D, 0xFF, 0x89, 0xFF, 0xA6, 0xFF, 0xD8, 0x00, 0x20, 0x00, 0x81, 0x00, 0xFC, 0x01, 0x91, 0x02, 0x3C, 0x02, 0xFA, 0x03, 0xC7, 0x04, 0x9A, 0x05, 0x6D, 0x06, 0x37, 0x06, 0xF0, 0x07, 0x90, 0x08, 0x0E, 0x08, 0x66, 0x08, 0x93};
const uint8_t AM2[] PROGMEM = {0x00, 0x05, 0x00, 0x07, 0x00, 0x09, 0x00, 0x09, 0x00, 0x07, 0x00, 0x02, 0xFF, 0xF8, 0xFF, 0xE9, 0xFF, 0xD5, 0xFF, 0xBC, 0xFF, 0x9E, 0xFF, 0x7F, 0xFF, 0x61, 0xFF, 0x49, 0xFF, 0x3B, 0xFF, 0x3D, 0xFF, 0x54, 0xFF, 0x87, 0xFF, 0xDA, 0x00, 0x50, 0x00, 0xE9, 0x01, 0xA6, 0x02, 0x82, 0x03, 0x77, 0x04, 0x7D, 0x05, 0x89, 0x06, 0x8F, 0x07, 0x82, 0x08, 0x57, 0x09, 0x01, 0x09, 0x78, 0x09, 0xB6};
const uint8_t AM3[] PROGMEM = {0x00, 0x04, 0x00, 0x08, 0x00, 0x0C, 0x00, 0x12, 0x00, 0x16, 0x00, 0x1A, 0x00, 0x19, 0x00, 0x13, 0x00, 0x06, 0xFF, 0xF0, 0xFF, 0xD1, 0xFF, 0xA9, 0xFF, 0x7A, 0xFF, 0x49, 0xFF, 0x1B, 0xFE, 0xF7, 0xFE, 0xE7, 0xFE, 0xF2, 0xFF, 0x22, 0xFF, 0x7F, 0x00, 0x0D, 0x00, 0xCE, 0x01, 0xC1, 0x02, 0xDF, 0x04, 0x1E, 0x05, 0x70, 0x06, 0xC3, 0x08, 0x06, 0x09, 0x24, 0x0A, 0x0D, 0x0A, 0xB1, 0x0B, 0x06};
const uint8_t AM4[] PROGMEM = {0xFF, 0xFF, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0B, 0x00, 0x14, 0x00, 0x1F, 0x00, 0x2B, 0x00, 0x34, 0x00, 0x38, 0x00, 0x34, 0x00, 0x23, 0x00, 0x03, 0xFF, 0xD3, 0xFF, 0x94, 0xFF, 0x4C, 0xFF, 0x01, 0xFE, 0xBE, 0xFE, 0x90, 0xFE, 0x85, 0xFE, 0xAD, 0xFF, 0x13, 0xFF, 0xBF, 0x00, 0xB5, 0x01, 0xF1, 0x03, 0x68, 0x05, 0x09, 0x06, 0xBC, 0x08, 0x65, 0x09, 0xE6, 0x0B, 0x25, 0x0C, 0x08, 0x0C, 0x7E};
const uint8_t AM5[] PROGMEM = {0xFF, 0xFB, 0xFF, 0xF8, 0xFF, 0xF6, 0xFF, 0xF7, 0xFF, 0xFC, 0x00, 0x06, 0x00, 0x16, 0x00, 0x2B, 0x00, 0x42, 0x00, 0x57, 0x00, 0x65, 0x00, 0x64, 0x00, 0x4F, 0x00, 0x20, 0xFF, 0xD7, 0xFF, 0x76, 0xFF, 0x07, 0xFE, 0x99, 0xFE, 0x40, 0xFE, 0x13, 0xFE, 0x2A, 0xFE, 0x98, 0xFF, 0x6C, 0x00, 0xAB, 0x02, 0x4C, 0x04, 0x3E, 0x06, 0x60, 0x08, 0x8A, 0x0A, 0x90, 0x0C, 0x45, 0x0D, 0x82, 0x0E, 0x27};
const uint8_t AM6[] PROGMEM = {0xFF, 0xFF, 0xFF, 0xFC, 0xFF, 0xF6, 0xFF, 0xEF, 0xFF, 0xE8, 0xFF, 0xE3, 0xFF, 0xE6, 0xFF, 0xF2, 0x00, 0x09, 0x00, 0x2C, 0x00, 0x56, 0x00, 0x80, 0x00, 0x9F, 0x00, 0xA6, 0x00, 0x8A, 0x00, 0x42, 0xFF, 0xCF, 0xFF, 0x39, 0xFE, 0x95, 0xFE, 0x00, 0xFD, 0x9F, 0xFD, 0x99, 0xFE, 0x11, 0xFF, 0x1E, 0x00, 0xC5, 0x02, 0xF8, 0x05, 0x92, 0x08, 0x5C, 0x0B, 0x11, 0x0D, 0x6A, 0x0F, 0x25, 0x10, 0x10};
const uint8_t AM7[] PROGMEM = {0x00, 0x05, 0x00, 0x08, 0x00, 0x08, 0x00, 0x04, 0xFF, 0xFA, 0xFF, 0xEB, 0xFF, 0xD9, 0xFF, 0xC8, 0xFF, 0xC1, 0xFF, 0xCA, 0xFF, 0xE8, 0x00, 0x1E, 0x00, 0x65, 0x00, 0xAF, 0x00, 0xE8, 0x00, 0xF9, 0x00, 0xCB, 0x00, 0x56, 0xFF, 0x9C, 0xFE, 0xB7, 0xFD, 0xD2, 0xFD, 0x2A, 0xFC, 0xFD, 0xFD, 0x87, 0xFE, 0xEC, 0x01, 0x31, 0x04, 0x35, 0x07, 0xB2, 0x0B, 0x45, 0x0E, 0x7C, 0x10, 0xEA, 0x12, 0x38};
const uint8_t AM8[] PROGMEM = {0xFF, 0xFE, 0x00, 0x02, 0x00, 0x08, 0x00, 0x11, 0x00, 0x19, 0x00, 0x1A, 0x00, 0x11, 0xFF, 0xFA, 0xFF, 0xD7, 0xFF, 0xB0, 0xFF, 0x93, 0xFF, 0x8F, 0xFF, 0xB3, 0x00, 0x02, 0x00, 0x74, 0x00, 0xEE, 0x01, 0x48, 0x01, 0x58, 0x00, 0xFD, 0x00, 0x2C, 0xFE, 0xFF, 0xFD, 0xB5, 0xFC, 0xAE, 0xFC, 0x53, 0xFD, 0x06, 0xFE, 0xFE, 0x02, 0x36, 0x06, 0x65, 0x0B, 0x03, 0x0F, 0x5F, 0x12, 0xC6, 0x14, 0xA3};
const uint8_t AM9[] PROGMEM = {0xFF, 0xFD, 0xFF, 0xF8, 0xFF, 0xF4, 0xFF, 0xF4, 0xFF, 0xFC, 0x00, 0x0E, 0x00, 0x25, 0x00, 0x38, 0x00, 0x3C, 0x00, 0x24, 0xFF, 0xEE, 0xFF, 0xA5, 0xFF, 0x62, 0xFF, 0x45, 0xFF, 0x6C, 0xFF, 0xE4, 0x00, 0x98, 0x01, 0x53, 0x01, 0xCA, 0x01, 0xB1, 0x00, 0xDE, 0xFF, 0x63, 0xFD, 0x99, 0xFC, 0x19, 0xFB, 0x96, 0xFC, 0xAA, 0xFF, 0xA3, 0x04, 0x57, 0x0A, 0x20, 0x0F, 0xFA, 0x14, 0xBD, 0x17, 0x69};
const uint8_t AM10[] PROGMEM = {0x00, 0x06, 0x00, 0x08, 0x00, 0x06, 0xFF, 0xFC, 0xFF, 0xED, 0xFF, 0xDE, 0xFF, 0xDB, 0xFF, 0xEE, 0x00, 0x17, 0x00, 0x4B, 0x00, 0x70, 0x00, 0x67, 0x00, 0x21, 0xFF, 0xA8, 0xFF, 0x2A, 0xFE, 0xE9, 0xFF, 0x21, 0xFF, 0xE3, 0x00, 0xFE, 0x02, 0x01, 0x02, 0x5D, 0x01, 0xA7, 0xFF, 0xD4, 0xFD, 0x64, 0xFB, 0x52, 0xFA, 0xCA, 0xFC, 0xBD, 0x01, 0x77, 0x08, 0x62, 0x10, 0x15, 0x16, 0xB6, 0x1A, 0x8B};
const uint8_t AM11[] PROGMEM = {0xFF, 0xFA, 0xFF, 0xFB, 0x00, 0x01, 0x00, 0x0E, 0x00, 0x1A, 0x00, 0x19, 0x00, 0x04, 0xFF, 0xDC, 0xFF, 0xB7, 0xFF, 0xB3, 0xFF, 0xE3, 0x00, 0x41, 0x00, 0x9F, 0x00, 0xBB, 0x00, 0x66, 0xFF, 0xA8, 0xFE, 0xD8, 0xFE, 0x78, 0xFE, 0xF2, 0x00, 0x49, 0x01, 0xF0, 0x02, 0xF6, 0x02, 0x77, 0x00, 0x33, 0xFC, 0xE6, 0xFA, 0x38, 0xFA, 0x1D, 0xFD, 0xEB, 0x05, 0x97, 0x0F, 0x6E, 0x18, 0x95, 0x1E, 0x17};
const uint8_t AM12[] PROGMEM = {0x00, 0x06, 0x00, 0x05, 0xFF, 0xFC, 0xFF, 0xEE, 0xFF, 0xE8, 0xFF, 0xF5, 0x00, 0x17, 0x00, 0x3A, 0x00, 0x3D, 0x00, 0x09, 0xFF, 0xB1, 0xFF, 0x72, 0xFF, 0x8E, 0x00, 0x1A, 0x00, 0xCC, 0x01, 0x1F, 0x00, 0xA6, 0xFF, 0x75, 0xFE, 0x40, 0xFE, 0x03, 0xFF, 0x4B, 0x01, 0x9E, 0x03, 0x82, 0x03, 0x4A, 0x00, 0x50, 0xFB, 0xD3, 0xF8, 0xBB, 0xFA, 0x2F, 0x01, 0xAB, 0x0D, 0xBA, 0x1A, 0x37, 0x22, 0x24};
const uint8_t AM13[] PROGMEM = {0xFF, 0xFA, 0xFF, 0xF9, 0x00, 0x01, 0x00, 0x11, 0x00, 0x19, 0x00, 0x06, 0xFF, 0xDE, 0xFF, 0xC3, 0xFF, 0xDE, 0x00, 0x2F, 0x00, 0x78, 0x00, 0x63, 0xFF, 0xD9, 0xFF, 0x3A, 0xFF, 0x26, 0xFF, 0xED, 0x01, 0x19, 0x01, 0x9A, 0x00, 0xA9, 0xFE, 0xB1, 0xFD, 0x53, 0xFE, 0x28, 0x01, 0x2B, 0x04, 0x25, 0x04, 0x15, 0xFF, 0xCF, 0xF9, 0xC6, 0xF7, 0x3A, 0xFC, 0xC5, 0x0A, 0x99, 0x1B, 0x56, 0x26, 0xBD};
const uint8_t AM14[] PROGMEM = {0x00, 0x03, 0x00, 0x0A, 0x00, 0x08, 0xFF, 0xF5, 0xFF, 0xE3, 0xFF, 0xF0, 0x00, 0x1E, 0x00, 0x40, 0x00, 0x1A, 0xFF, 0xBA, 0xFF, 0x86, 0xFF, 0xDE, 0x00, 0x8E, 0x00, 0xD2, 0x00, 0x20, 0xFE, 0xFA, 0xFE, 0xAF, 0xFF, 0xF8, 0x01, 0xC9, 0x02, 0x03, 0xFF, 0xC6, 0xFC, 0xFE, 0xFC, 0xFB, 0x00, 0xCB, 0x05, 0x1C, 0x04, 0xAF, 0xFD, 0xFC, 0xF6, 0x86, 0xF7, 0x84, 0x05, 0xB5, 0x1B, 0x94, 0x2B, 0xFD};

/* The narrowest filter generated by Brian Beezley's optimizer
   FM 8.8 kHz -3dB, 31.4 kHz -60dB
   AM 1.1 kHz -3dB,  3.9 kHz -60dB */
const uint8_t NFM[] PROGMEM = {0x00, 0x01, 0x00, 0x03, 0x00, 0x06, 0x00, 0x0A, 0x00, 0x11, 0x00, 0x1A, 0x00, 0x26, 0x00, 0x36, 0x00, 0x4A, 0x00, 0x63, 0x00, 0x81, 0x00, 0xA5, 0x00, 0xCF, 0x00, 0xFF, 0x01, 0x35, 0x01, 0x71, 0x01, 0xB3, 0x01, 0xFA, 0x02, 0x45, 0x02, 0x93, 0x02, 0xE4, 0x03, 0x35, 0x03, 0x86, 0x03, 0xD5, 0x04, 0x20, 0x04, 0x66, 0x04, 0xA5, 0x04, 0xDC, 0x05, 0x0A, 0x05, 0x2D, 0x05, 0x45, 0x05, 0x51};

const uint8_t* const filters[] =
{
    FM0,  // 0
    FM1,  // 1
    FM2,  // 2
    FM3,  // 3
    FM4,  // 4
    FM5,  // 5
    FM6,  // 6
    FM7,  // 7
    FM8,  // 8
    FM9,  // 9
    FM10, // 10
    FM11, // 11
    FM12, // 12
    FM13, // 13
    FM14, // 14
    FM15, // 15
    AM0,  // 16
    AM1,  // 17
    AM2,  // 18
    AM3,  // 19
    AM4,  // 20
    AM5,  // 21
    AM6,  // 22
    AM7,  // 23
    AM8,  // 24
    AM9,  // 25
    AM10, // 26
    AM11, // 27
    AM12, // 28
    AM13, // 29
    AM14, // 30
    NFM // 31
};

uint8_t adaptive_filters_set[] =
{
    0, 26, 1, 28, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13
};

// DSP initialization data
const uint8_t INIT[] PROGMEM =
{
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    5,0x03,0x10,0x09,0x00,0x00,
    6,0x00,0x00,0x20,0x02,0x09,0x7A,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x01,0x0F,0xFD,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x03,0x0F,0xFD,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x05,0x0F,0xFD,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x09,0x0F,0xFD,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x02,0x00,
    6,0x09,0x0F,0xFD,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x0D,0x0F,0xFD,0x00,0x00,0x00,
    6,0x00,0x00,0x10,0x00,0x00,0x00,
    6,0x09,0x01,0x5F,0x80,0x00,0x00,
    6,0x09,0x01,0x60,0x80,0x00,0x00,
    6,0x09,0x01,0x61,0x80,0x00,0x00,
    6,0x01,0x00,0x04,0x00,0x00,0x01,
    6,0x0D,0x0F,0xF6,0x01,0xB6,0xDB,
    6,0x0D,0x0F,0xF7,0x00,0xC0,0x3E,
    6,0x01,0x0F,0xF9,0x57,0xF3,0x55,
    6,0x00,0x00,0x20,0x02,0x09,0x7A,
    6,0x05,0x0F,0xF9,0x00,0x00,0x13,
    5,0x03,0x12,0x8D,0x00,0x58,
    5,0x01,0x10,0x04,0x00,0x00,
    5,0x05,0x10,0x48,0x00,0x00,
    5,0x03,0x10,0x11,0x07,0xFF,
    5,0x0D,0x14,0x88,0x05,0x09,
    5,0x03,0x12,0x3B,0x05,0x2C,
    5,0x03,0x11,0x26,0x00,0xF6,
    5,0x03,0x11,0x27,0x0F,0xEB,
    5,0x05,0x10,0x19,0x00,0xF6,
    5,0x05,0x10,0x1A,0x0F,0xD9,
    5,0x03,0x11,0x38,0x0A,0x00,
    5,0x03,0x12,0x7A,0x00,0xF6,
    5,0x03,0x12,0x7B,0x0F,0xD9,
    5,0x05,0x10,0x86,0x00,0xE8,
    5,0x05,0x10,0x87,0x0F,0xC5,
    5,0x01,0x10,0x95,0x00,0x80,
    5,0x01,0x10,0x96,0x00,0x00,
    5,0x01,0x10,0x97,0x00,0x00,
    5,0x03,0x11,0xFD,0x07,0xFE,
    5,0x03,0x11,0xFE,0x00,0x01,
    5,0x03,0x12,0x29,0x05,0xB6,
    6,0x01,0x01,0xD1,0x00,0x10,0x22,
    6,0x01,0x01,0xD2,0x00,0x00,0xE5,
    7,0x03,0x12,0x25,0x06,0x34,0x07,0xFE,
    7,0x03,0x12,0x27,0x00,0xC4,0x00,0x01,
    5,0x05,0x10,0xC2,0x00,0x80,
    5,0x05,0x10,0xC3,0x00,0x00,
    5,0x05,0x10,0xC4,0x00,0x00,
    5,0x05,0x10,0xAA,0x05,0xB6,
    6,0x05,0x02,0xA1,0x00,0x10,0x22,
    6,0x05,0x02,0xA2,0x00,0x00,0xE5,
    7,0x05,0x10,0xA6,0x06,0x34,0x07,0xFE,
    7,0x05,0x10,0xA8,0x00,0xC4,0x00,0x01,
    5,0x03,0x11,0xB1,0x03,0xD4,
    5,0x03,0x11,0xB2,0x00,0x00,
    5,0x03,0x11,0xC4,0x00,0x89,
    6,0x03,0x02,0x67,0x02,0x85,0x47,
    5,0x03,0x11,0xB3,0x01,0x94,
    5,0x03,0x11,0xBB,0x00,0x00,
    5,0x03,0x11,0xBC,0x00,0x00,
    5,0x03,0x11,0xBD,0x07,0xFF,
    6,0x03,0x02,0x6B,0x80,0x00,0x00,
    6,0x03,0x02,0x6C,0x7F,0xFF,0xFF,
    5,0x03,0x11,0xBF,0x00,0x00,
    5,0x03,0x11,0xC0,0x07,0xFF,
    6,0x03,0x02,0x6E,0x80,0x00,0x00,
    6,0x03,0x02,0x6F,0x7F,0xFF,0xFF,
    5,0x03,0x11,0xC6,0x00,0x73,
    5,0x03,0x11,0xC2,0x00,0x1C,
    6,0x03,0x02,0x61,0x00,0x20,0x44,
    5,0x03,0x11,0x87,0x00,0x00,
    5,0x03,0x11,0x88,0x07,0xFF,
    5,0x03,0x11,0x91,0x00,0x00,
    5,0x03,0x11,0xA1,0x00,0x07,
    6,0x03,0x02,0x45,0x00,0x04,0x4D,
    5,0x03,0x11,0x95,0x00,0x00,
    5,0x03,0x11,0x96,0x07,0xFF,
    5,0x03,0x11,0xA0,0x00,0x1C,
    6,0x03,0x02,0x42,0x00,0x04,0x4D,
    5,0x03,0x11,0x83,0x00,0x00,
    5,0x03,0x11,0x9D,0x00,0x00,
    5,0x03,0x11,0x9B,0x0C,0x93,
    5,0x03,0x11,0x9C,0x01,0xBF,
    5,0x03,0x11,0x9E,0x00,0x89,
    6,0x03,0x02,0x3C,0x00,0x02,0x27,
    5,0x03,0x11,0x50,0x04,0xC8,
    5,0x03,0x11,0x51,0x0F,0x8B,
    5,0x03,0x11,0x5D,0x00,0x1C,
    6,0x03,0x02,0x13,0x00,0x08,0x11,
    5,0x03,0x11,0xDA,0x05,0x12,
    5,0x03,0x11,0x5D,0x03,0xFD,
    6,0x03,0x02,0x13,0x02,0x85,0x47,
    5,0x03,0x11,0x5E,0x03,0xFD,
    6,0x03,0x02,0x15,0x02,0x85,0x47,
    5,0x03,0x11,0x53,0x0E,0x57,
    5,0x03,0x11,0x54,0x00,0xD5,
    6,0x03,0x02,0x17,0x80,0x00,0x00,
    6,0x03,0x02,0x18,0x7F,0xFF,0xFF,
    5,0x03,0x11,0x5B,0x00,0x1C,
    6,0x03,0x02,0x0E,0x00,0x08,0x11,
    5,0x03,0x11,0x5B,0x03,0xFD,
    6,0x03,0x02,0x0E,0x02,0x85,0x47,
    5,0x03,0x11,0x5C,0x03,0xFD,
    6,0x03,0x02,0x10,0x02,0x85,0x47,
    5,0x03,0x11,0x56,0x0D,0x80,
    5,0x03,0x11,0x57,0x01,0x40,
    5,0x03,0x11,0x60,0x07,0xFF,
    6,0x03,0x02,0x1A,0x80,0x00,0x00,
    6,0x03,0x02,0x1B,0x7F,0xFF,0xFF,
    5,0x03,0x11,0x59,0x00,0x1C,
    6,0x03,0x02,0x09,0x00,0x08,0x11,
    5,0x03,0x11,0x59,0x00,0x1C,
    6,0x03,0x02,0x09,0x00,0x08,0x11,
    5,0x03,0x11,0x5A,0x00,0x1C,
    6,0x03,0x02,0x0B,0x00,0x08,0x11,
    5,0x03,0x11,0x98,0x03,0xC2,
    5,0x03,0x11,0x99,0x0F,0x40,
    5,0x03,0x11,0x9F,0x00,0x89,
    6,0x03,0x02,0x3F,0x00,0x02,0x27,
    5,0x01,0x10,0xB3,0x07,0xE3,
    5,0x01,0x10,0xB4,0x00,0x11,
    5,0x01,0x10,0xB5,0x01,0x9A,
    6,0x01,0x01,0xF2,0x00,0x00,0x0A,
    6,0x01,0x02,0x08,0x00,0x42,0x00,
    5,0x01,0x10,0xA6,0x00,0x66,
    6,0x01,0x01,0xF0,0x02,0x8F,0x5C,
    6,0x03,0x00,0x81,0x00,0xCE,0xC0,
    6,0x03,0x02,0xEB,0x00,0x00,0x64,
    5,0x0D,0x12,0x5A,0x04,0x00,
    5,0x0D,0x12,0x6B,0x00,0xCD,
    5,0x0D,0x12,0x7C,0x05,0x00,
    6,0x0D,0x01,0x72,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA3,0x04,0xF6,
    5,0x0D,0x12,0x5B,0x03,0xD7,
    5,0x0D,0x12,0x6C,0x01,0x71,
    5,0x0D,0x12,0x7D,0x05,0x00,
    6,0x0D,0x01,0x73,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA3,0x04,0xF6,
    5,0x0D,0x12,0x5C,0x03,0xAE,
    5,0x0D,0x12,0x6D,0x01,0x71,
    5,0x0D,0x12,0x7E,0x05,0x00,
    6,0x0D,0x01,0x74,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA3,0x04,0xF6,
    5,0x0D,0x12,0x5D,0x03,0x85,
    5,0x0D,0x12,0x6E,0x01,0x71,
    5,0x0D,0x12,0x7F,0x05,0x00,
    6,0x0D,0x01,0x75,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA3,0x04,0xF6,
    5,0x0D,0x12,0x5E,0x03,0x5C,
    5,0x0D,0x12,0x6F,0x01,0x71,
    5,0x0D,0x12,0x80,0x05,0x00,
    6,0x0D,0x01,0x76,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA3,0x04,0xF6,
    5,0x0D,0x12,0x5F,0x03,0x33,
    5,0x0D,0x12,0x70,0x01,0x71,
    5,0x0D,0x12,0x81,0x05,0x00,
    6,0x0D,0x01,0x77,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA3,0x04,0xF6,
    5,0x0D,0x12,0x60,0x03,0x1F,
    5,0x0D,0x12,0x71,0x01,0x71,
    5,0x0D,0x12,0x82,0x05,0x00,
    6,0x0D,0x01,0x78,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA3,0x04,0xF6,
    5,0x0D,0x12,0x61,0x02,0x66,
    5,0x0D,0x12,0x72,0x01,0x71,
    5,0x0D,0x12,0x83,0x05,0x00,
    6,0x0D,0x01,0x79,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA4,0x05,0xAE,
    5,0x0D,0x12,0x62,0x02,0x66,
    5,0x0D,0x12,0x73,0x01,0x71,
    5,0x0D,0x12,0x84,0x05,0x00,
    6,0x0D,0x01,0x7A,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA4,0x05,0xAE,
    5,0x0D,0x12,0x63,0x02,0x66,
    5,0x0D,0x12,0x74,0x01,0x71,
    5,0x0D,0x12,0x85,0x05,0x00,
    6,0x0D,0x01,0x7B,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA4,0x05,0xAE,
    5,0x0D,0x12,0x64,0x02,0x66,
    5,0x0D,0x12,0x75,0x01,0x71,
    5,0x0D,0x12,0x86,0x05,0x00,
    6,0x0D,0x01,0x7C,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x90,0x08,0x8F,
    5,0x0D,0x12,0x8F,0x00,0x8F,
    5,0x0D,0x12,0x96,0x09,0xB8,
    5,0x0D,0x12,0x95,0x01,0xB8,
    5,0x0D,0x12,0xA4,0x05,0xAE,
    5,0x0D,0x12,0x65,0x02,0x00,
    5,0x0D,0x12,0x76,0x01,0x71,
    5,0x0D,0x12,0x87,0x05,0x00,
    6,0x0D,0x01,0x7D,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x92,0x08,0x1A,
    5,0x0D,0x12,0x91,0x00,0x1A,
    5,0x0D,0x12,0x9E,0x08,0x3A,
    5,0x0D,0x12,0x9D,0x00,0x3A,
    5,0x0D,0x12,0xA4,0x05,0xAE,
    5,0x0D,0x12,0x66,0x02,0x00,
    5,0x0D,0x12,0x77,0x01,0x71,
    5,0x0D,0x12,0x88,0x05,0x00,
    6,0x0D,0x01,0x7E,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x92,0x08,0x1A,
    5,0x0D,0x12,0x91,0x00,0x1A,
    5,0x0D,0x12,0x9E,0x08,0x3A,
    5,0x0D,0x12,0x9D,0x00,0x3A,
    5,0x0D,0x12,0xA4,0x05,0xAE,
    5,0x0D,0x12,0x67,0x02,0x00,
    5,0x0D,0x12,0x78,0x01,0x71,
    5,0x0D,0x12,0x89,0x05,0x00,
    6,0x0D,0x01,0x7F,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x92,0x08,0x1A,
    5,0x0D,0x12,0x91,0x00,0x1A,
    5,0x0D,0x12,0x9E,0x08,0x3A,
    5,0x0D,0x12,0x9D,0x00,0x3A,
    5,0x0D,0x12,0xA4,0x05,0xAE,
    5,0x0D,0x12,0x68,0x02,0x00,
    5,0x0D,0x12,0x79,0x01,0x71,
    5,0x0D,0x12,0x8A,0x05,0x00,
    6,0x0D,0x01,0x80,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x92,0x08,0x1A,
    5,0x0D,0x12,0x91,0x00,0x1A,
    5,0x0D,0x12,0x9E,0x08,0x3A,
    5,0x0D,0x12,0x9D,0x00,0x3A,
    5,0x0D,0x12,0xA4,0x05,0xAE,
    5,0x0D,0x12,0x69,0x02,0x00,
    5,0x0D,0x12,0x7A,0x01,0x71,
    5,0x0D,0x12,0x8B,0x05,0x00,
    6,0x0D,0x01,0x81,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x92,0x08,0x1A,
    5,0x0D,0x12,0x91,0x00,0x1A,
    5,0x0D,0x12,0x9E,0x08,0x3A,
    5,0x0D,0x12,0x9D,0x00,0x3A,
    5,0x0D,0x12,0xA4,0x05,0xAE,
    5,0x0D,0x12,0x6A,0x02,0x00,
    5,0x0D,0x12,0x7B,0x01,0x71,
    5,0x0D,0x12,0x8C,0x05,0x00,
    6,0x0D,0x01,0x82,0x00,0xA3,0xD7,
    5,0x0D,0x12,0x92,0x08,0x1A,
    5,0x0D,0x12,0x91,0x00,0x1A,
    5,0x0D,0x12,0x9E,0x08,0x3A,
    5,0x0D,0x12,0x9D,0x00,0x3A,
    5,0x0D,0x12,0xA5,0x06,0xA4,
    5,0x0D,0x12,0x98,0x09,0x15,
    5,0x0D,0x12,0x97,0x01,0x15,
    5,0x0D,0x12,0xA0,0x08,0x40,
    5,0x0D,0x12,0x9F,0x00,0x40,
    6,0x0D,0x01,0xD8,0x00,0x00,0x00,
    6,0x0D,0x01,0xD9,0x00,0x00,0x00,
    5,0x0D,0x12,0x9A,0x09,0x15,
    5,0x0D,0x12,0x99,0x01,0x15,
    5,0x0D,0x12,0xA2,0x08,0x40,
    5,0x0D,0x12,0xA1,0x00,0x40,
    5,0x0D,0x12,0x8E,0x09,0x76,
    5,0x0D,0x12,0x8D,0x01,0x76,
    6,0x03,0x05,0xE5,0x0F,0xE7,0x00,
    6,0x05,0x04,0xAB,0x10,0x05,0x00,
    6,0x01,0x02,0x77,0x0C,0x14,0x00,
    6,0x03,0x05,0xE4,0x0F,0xE6,0x00,
    6,0x05,0x04,0xAC,0x1F,0xF6,0x00,
    6,0x01,0x02,0x78,0x0D,0x46,0x00,
    6,0x0D,0x00,0x76,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x87,0x00,0x00,0x00,
    6,0x0D,0x00,0x77,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x88,0x00,0x00,0x00,
    6,0x0D,0x00,0x78,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x89,0x00,0x00,0x00,
    6,0x0D,0x00,0x79,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8A,0x00,0x00,0x00,
    6,0x0D,0x00,0x7A,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x7B,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8B,0x00,0x00,0x00,
    6,0x0D,0x00,0x7C,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8C,0x00,0x00,0x00,
    6,0x0D,0x00,0x7D,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8D,0x00,0x00,0x00,
    6,0x0D,0x00,0x7E,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8E,0x00,0x00,0x00,
    6,0x0D,0x00,0x7F,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8F,0x00,0x00,0x00,
    6,0x0D,0x00,0x80,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x90,0x00,0x00,0x00,
    6,0x0D,0x00,0x81,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x91,0x00,0x00,0x00,
    6,0x0D,0x00,0x82,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x83,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x84,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x85,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x86,0x7F,0xFF,0xFF,
    5,0x03,0x11,0x6A,0x00,0x00,
    5,0x03,0x11,0x6B,0x00,0x00,
    5,0x03,0x11,0x6C,0x00,0x00,
    5,0x03,0x11,0x6D,0x00,0x00,
    5,0x03,0x11,0x6E,0x00,0x00,
    5,0x03,0x11,0x6F,0x00,0x00,
    5,0x03,0x11,0x70,0x00,0x00,
    5,0x03,0x11,0x71,0x00,0x00,
    5,0x03,0x11,0x72,0x00,0x00,
    5,0x03,0x11,0x73,0x00,0x00,
    5,0x03,0x11,0x74,0x00,0x00,
    5,0x03,0x11,0x75,0x00,0x00,
    5,0x03,0x11,0x76,0x07,0xFF,
    5,0x03,0x11,0x77,0x00,0x00,
    5,0x03,0x11,0x78,0x00,0x00,
    5,0x03,0x11,0x79,0x00,0x00,
    5,0x03,0x11,0x7A,0x00,0x00,
    5,0x03,0x11,0x7B,0x00,0x00,
    5,0x03,0x11,0x7C,0x00,0x00,
    5,0x03,0x11,0x7D,0x00,0x00,
    5,0x03,0x11,0x7E,0x00,0x00,
    5,0x03,0x11,0x7F,0x00,0x00,
    5,0x03,0x11,0x80,0x00,0x00,
    5,0x03,0x11,0x81,0x00,0x00,
    5,0x03,0x11,0x82,0x00,0x00,
    5,0x0D,0x14,0x8A,0x01,0x57,
    5,0x0D,0x14,0x8B,0x07,0xF4,
    5,0x0D,0x14,0x8C,0x02,0x04,
    5,0x0D,0x14,0x8D,0x00,0x0B,
    6,0x03,0x00,0x31,0x00,0x00,0x00,
    6,0x03,0x00,0x34,0x40,0x00,0x00,
    6,0x03,0x00,0x33,0x06,0x4D,0x32,
    6,0x03,0x00,0x2D,0x00,0x00,0x00,
    6,0x03,0x00,0x30,0x40,0x00,0x00,
    6,0x03,0x00,0x2E,0x00,0x03,0xE8,
    6,0x09,0x02,0x1D,0x00,0x00,0x00,
    6,0x09,0x02,0x7A,0x00,0x00,0x01,
    6,0x09,0x02,0x77,0x40,0x00,0x00,
    6,0x09,0x02,0x79,0x00,0x00,0x00,
    6,0x0D,0x00,0x3C,0x00,0x00,0x00,
    6,0x0D,0x00,0x76,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x87,0x00,0x00,0x00,
    6,0x0D,0x00,0x77,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x88,0x00,0x00,0x00,
    6,0x0D,0x00,0x78,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x89,0x00,0x00,0x00,
    6,0x0D,0x00,0x79,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8A,0x00,0x00,0x00,
    6,0x0D,0x00,0x7A,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x7B,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8B,0x00,0x00,0x00,
    6,0x0D,0x00,0x7C,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8C,0x00,0x00,0x00,
    6,0x0D,0x00,0x7D,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8D,0x00,0x00,0x00,
    6,0x0D,0x00,0x7E,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8E,0x00,0x00,0x00,
    6,0x0D,0x00,0x7F,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x8F,0x00,0x00,0x00,
    6,0x0D,0x00,0x80,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x90,0x00,0x00,0x00,
    6,0x0D,0x00,0x81,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x91,0x00,0x00,0x00,
    6,0x0D,0x00,0x82,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x83,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x84,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x85,0x7F,0xFF,0xFF,
    6,0x0D,0x00,0x86,0x7F,0xFF,0xFF,
    5,0x03,0x10,0x2E,0x00,0x00,
    6,0x0D,0x00,0x00,0x00,0x00,0xC6,
    6,0x0D,0x00,0x01,0x00,0x00,0xC7,
    6,0x0D,0x00,0xC4,0x00,0x00,0x41,
    6,0x03,0x00,0x06,0x00,0x00,0x3C,
    6,0x03,0x00,0x07,0x00,0x00,0x3D,
    6,0x03,0x00,0x08,0x00,0x00,0x3A,
    6,0x03,0x00,0x09,0x00,0x00,0x3B,
    6,0x09,0x01,0x2E,0x00,0x01,0x37,
    5,0x01,0x10,0xA5,0x02,0x66,
    9,0x03,0x11,0xDD,0x07,0xFF,0x00,0x00,0x00,0x00,
    5,0x03,0x10,0x38,0x07,0xFF,
    6,0x03,0x00,0xEA,0x04,0x60,0x80,
    6,0x03,0x00,0xE8,0x00,0x00,0x32,
    5,0x03,0x10,0xF0,0x01,0xD0,
    5,0x03,0x10,0xF1,0x0F,0x7E,
    5,0x03,0x10,0xF2,0x00,0x41,
    5,0x03,0x10,0xF3,0x00,0x46,
    6,0x03,0x00,0xFC,0x00,0x20,0x44,
    5,0x03,0x10,0xE8,0x00,0x00,
    5,0x03,0x10,0xE9,0x07,0xFF,
    5,0x03,0x10,0xEE,0x00,0x07,
    6,0x03,0x00,0xFA,0x00,0x04,0x4D,
    5,0x03,0x10,0xEB,0x00,0x00,
    5,0x03,0x10,0xEC,0x07,0xFF,
    5,0x03,0x10,0xEF,0x00,0x1C,
    5,0x03,0x10,0x2F,0x00,0x00,
    5,0x03,0x10,0x30,0x07,0xFF,
    5,0x03,0x10,0x32,0x00,0x0E,
    6,0x03,0x00,0xE2,0x00,0x06,0x74,
    5,0x03,0x11,0x0E,0x05,0x76,
    5,0x03,0x11,0x0D,0x01,0x30,
    5,0x03,0x11,0x0C,0x00,0x03,
    5,0x03,0x11,0x0B,0x00,0xA3,
    5,0x03,0x10,0xE7,0x03,0xB3,
    5,0x01,0x10,0x26,0x00,0x07,
    5,0x01,0x10,0x21,0x00,0x49,
    5,0x01,0x10,0x38,0x04,0x00,
    6,0x03,0x00,0xE7,0xFA,0x00,0x00,
    5,0x03,0x10,0x34,0x00,0x0A,
    13,0x03,0x11,0x11,0x0F,0x42,0x0D,0x7B,0x00,0xBE,0x00,0x00,0x06,0x7F,
    5,0x03,0x12,0x70,0x03,0x94,
    5,0x03,0x12,0x71,0x0F,0x80,
    5,0x03,0x12,0x72,0x00,0xCD,
    5,0x03,0x12,0x73,0x00,0x46,
    6,0x03,0x05,0xB4,0x00,0x06,0x74,
    5,0x03,0x10,0x20,0x00,0x00,
    6,0x01,0x0F,0xF1,0x7C,0x90,0x20,
    6,0x05,0x0F,0xF1,0xB1,0x10,0x40,
    5,0x03,0x11,0xE9,0x07,0xFF,
    5,0x05,0x10,0x71,0x07,0xFF,
    6,0x0D,0x07,0xDA,0xFF,0xFF,0x12,
    6,0x0D,0x07,0xD9,0xFF,0xFF,0x12,
    0
};

const uint8_t AM[] PROGMEM =
{
    5,0x0D,0x14,0x89,0x02,0x00,
    6,0x01,0x00,0x01,0x00,0x00,0x51,
    6,0x05,0x0F,0xF9,0x00,0x00,0x1F,
    5,0x05,0x10,0x41,0x00,0x02,
    6,0x01,0x00,0xE7,0x00,0x00,0x01,
    6,0x01,0x00,0xE8,0x00,0x00,0x02,
    6,0x05,0x02,0x1B,0x00,0x00,0x01,
    6,0x05,0x02,0x1C,0x00,0x00,0x02,
    5,0x03,0x11,0xF6,0x00,0xE9,
    5,0x03,0x10,0x2E,0x07,0xFF,
    6,0x0D,0x00,0x00,0x00,0x00,0xC6,
    6,0x0D,0x00,0x01,0x00,0x00,0xC7,
    6,0x0D,0x00,0xC4,0x00,0x00,0x03,
    6,0x03,0x00,0x06,0x00,0x00,0x3C,
    6,0x03,0x00,0x07,0x00,0x00,0x3D,
    6,0x09,0x01,0x2E,0x00,0x02,0x1A,
    6,0x01,0x0F,0xF5,0xE2,0x76,0x28,
    6,0x05,0x0F,0xF5,0xE2,0x75,0xC1,
    5,0x03,0x11,0x27,0x0F,0xEC,
    5,0x03,0x10,0x11,0x07,0x21,
    0
};

const uint8_t FM[] PROGMEM =
{
    5,0x0D,0x14,0x89,0x02,0x00,
    5,0x0D,0x14,0x88,0x05,0x73,
    5,0x03,0x11,0xF7,0x0F,0xC0,
    6,0x01,0x00,0x01,0x00,0x00,0x52,
    6,0x05,0x0F,0xF1,0xB1,0x10,0x40,
    5,0x05,0x10,0x41,0x00,0x02,
    5,0x01,0x10,0x6C,0x07,0xFF,
    5,0x01,0x10,0x6D,0x0F,0x6B,
    5,0x01,0x10,0x6E,0x00,0x00,
    5,0x01,0x10,0x6F,0x04,0x00,
    5,0x01,0x10,0x70,0x01,0x9A,
    5,0x01,0x10,0x71,0x00,0x00,
    5,0x01,0x10,0x76,0x00,0x03,
    5,0x01,0x10,0x77,0x00,0x00,
    5,0x01,0x10,0x78,0x00,0x02,
    5,0x01,0x10,0x79,0x00,0x03,
    5,0x01,0x10,0x7F,0x00,0x00,
    6,0x01,0x01,0xAD,0x0F,0xC0,0xFC,
    6,0x01,0x01,0xAF,0x00,0x00,0x00,
    6,0x05,0x00,0x67,0x00,0x00,0x0C,
    5,0x03,0x11,0xF6,0x00,0xE9,
    5,0x03,0x10,0x2E,0x00,0x00,
    6,0x0D,0x00,0x00,0x00,0x00,0xC6,
    6,0x0D,0x00,0x01,0x00,0x00,0xC7,
    6,0x0D,0x00,0xC4,0x00,0x00,0x41,
    6,0x03,0x00,0x06,0x00,0x00,0x38,
    6,0x03,0x00,0x07,0x00,0x00,0x39,
    6,0x03,0x00,0x08,0x00,0x00,0x3A,
    6,0x03,0x00,0x09,0x00,0x00,0x3B,
    6,0x09,0x01,0x2E,0x00,0x01,0x37,
    6,0x01,0x0F,0xF5,0xE2,0x76,0x28,
    6,0x05,0x0F,0xF5,0xE2,0x50,0x8D,
    6,0x05,0x0F,0xF9,0x00,0x00,0x17,
    5,0x03,0x10,0x11,0x06,0x5A,
    5,0x00,0x00,0x34,0x30,0x20, // RDS sync mode - max 2 bits error correctable blocks are handled as vaild
    5,0x00,0x00,0x35,0x00,0x60, // RDS fast pi mode & reset sync
    0
};

TwiMaster i2c(false);

uint8_t dsp_query(uint8_t, uint8_t, uint8_t);
void dsp_write_data(const uint8_t*);
void dsp_write_coeff(uint8_t, uint8_t);
void dsp_read_rds();
void dsp_set_filter(int8_t);
void dsp_set_deemphasis(uint8_t);
void tune(boolean);
void tune_freq(uint32_t, boolean);
void spectrum(uint16_t);
void serial_hex(uint8_t);
void sendcode(uint32_t code);
void carrier(int time);
void start();
void one();
void zero();
void align(uint32_t);

void setup(void)
{
    pinMode(RDS_PIN, INPUT);
    pinMode(SDA_PIN, INPUT);
    pinMode(SCL_PIN, INPUT);
    pinMode(RESET_PIN, OUTPUT);
    digitalWrite(RESET_PIN, LOW);
    pinMode(IR_PIN, OUTPUT);
    Serial.begin(115200);

    while(true)
    {
        if(Serial.available() > 0)
        {
            if(Serial.read() == 'x')
            {
                while(!Serial.available());
                if(Serial.read() == '\n')
                    break;
            }
        }
    }

#if IR
    for(uint8_t i=0; i<10; i++)
    {
        sendcode(0xA8BC8);
        delayMicroseconds(10000);
    }
    delay(5500);
#endif

    digitalWrite(RESET_PIN, HIGH);
    pinMode(SDA_PIN, OUTPUT);
    pinMode(SCL_PIN, OUTPUT);
    digitalWrite(SDA_PIN, HIGH);
    digitalWrite(SCL_PIN, HIGH);
    delay(100);

#if DSP_INIT
    dsp_write_data(INIT);
#endif

    mode_FM();
    tune_freq(87500, false);
    dsp_set_deemphasis(0); // 50us de-emphasis as default

    while(Serial.available() > 0)
        Serial.read(); // clear the serial buffer
    Serial.print("\nOK\n");
}

void loop()
{
    if(!digitalRead(RDS_PIN))
        dsp_read_rds();

    // check signal level and 19kHz pilot indicator ~15 times per second
    if((millis()-timer) >= 67)
    {
        uint32_t buffer;
        i2c.start(0x38 | I2C_WRITE);
        i2c.write(0x03);
        i2c.write(0x00);
        i2c.write((mode==MODE_FM)?0x92:0x6E);
        i2c.restart(0x38 | I2C_READ);
        buffer = ((uint32_t)i2c.read(false) << 16);
        buffer |= ((uint16_t)i2c.read(false) << 8);
        buffer |= i2c.read(true);
        i2c.stop();
        Serial.print('S');
        Serial.print((dsp_query(0x03, 0x10, 0x2C)&&mode==MODE_FM)?'s':'m'); // 19kHz pilot
        Serial.print(buffer, DEC);
        Serial.print('\n');
        timer = millis();
    }

    if(Serial.available() > 0)
    {
        buff[buff_pos] = Serial.read();
        if(buff[buff_pos] != '\n' && buff_pos != SERIAL_BUFFER_SIZE-1)
            buff_pos++;
        else
        {
            buff[buff_pos] = 0x00;
            buff_pos = 0;
            switch (buff[0])
            {
            case 'x':
                Serial.print("OK\n");
                break;

            case 'T': // frequency change
                tune_freq(atol(buff+1), true);
                break;

            case 'A': // RF AGC threshold
                switch (atoi(buff+1))
                {
                case 0:
                    AGC &= B11110011; // highest
                    break;
                case 1:
                    AGC &= B11110111; // high
                    AGC |= B00000100;
                    break;
                case 2:
                    AGC &= B11111011; // medium
                    AGC |= B00001000;
                    break;
                case 3:
                    AGC |= B00001100; // low
                    break;
                }
                tune(false);
                break;

            case 'V': // set 1st antenna circuit tuning voltage
                DAA = atoi(buff+1) & 0x7F;
                tune(false);
                break;

            case 'F': // change FIR filters
                dsp_set_filter(atoi(buff+1));
                break;

            case 'D': // change the de-emphasis
                dsp_set_deemphasis(atoi(buff+1));
                break;

            case 'M': // change the mode (added by F4CMB)
                switch(atoi(buff+1))
                {
                case MODE_FM:
                    mode_FM();
                    break;
                case MODE_AM:
                    mode_AM();
                    break;
                }
                tune(false);
                break;

            case 'G':
                if(buff[1] == '1')
                    CONTROL |= B10000000; // FM RF +6dB gain
                else
                    CONTROL &= B01111111; // FM RF standard gain

                if(buff[2] == '1')
                    CONTROL |= B00010000; // IF +6dB gain
                else
                    CONTROL &= B11101111; // IF standard gain

                tune(false);
                break;

            case 'S':
                if(buff[1] == 'a')
                    spectrum_start = atol(buff+2);
                else if(buff[1] == 'b')
                    spectrum_end = atol(buff+2);
                else if(spectrum_start > 0 && spectrum_end > 0)
                    spectrum(atoi(buff+1));
                break;

            case 'X': // shutdown
                TWCR = 0; // release SDA and SCL lines used by hardware I2C
                digitalWrite(RESET_PIN, LOW);
                Serial.print("X\n");
                delay(10);
                asm("jmp 0");
                break;
            }
        }
    }
}

uint8_t dsp_query(uint8_t addr1, uint8_t addr2, uint8_t addr3)
{
    i2c.start(0x38 | I2C_WRITE);
    i2c.write(addr1);
    i2c.write(addr2);
    i2c.write(addr3);
    i2c.restart(0x38 | I2C_READ);
    uint8_t buffer = i2c.read(true);
    i2c.stop();
    return buffer;
}

void dsp_write_data(const uint8_t* data)
{
    uint16_t i = 1;
    uint8_t len = pgm_read_byte_near(data), pos;
    while(len != 0x00)
    {
        i2c.start(0x38 | I2C_WRITE);
        for(pos=0; pos<len; pos++)
            i2c.write(pgm_read_byte_near(data+i+pos));
        i2c.stop();
        i += pos;
        len = pgm_read_byte_near(data+(i++));
    }
}

void dsp_write_coeff(uint8_t bank, uint8_t filter)
{
    uint8_t i = 0;
    uint16_t address = 0x0C00 + 32 * bank;
    while(i<64)
    {
        i2c.start(0x38 | I2C_WRITE);
        i2c.write(0x01);
        i2c.write(address >> 8);
        i2c.write(address & 0xFF);
        i2c.write(pgm_read_byte_near(filters[filter]+(i++)));
        i2c.write(pgm_read_byte_near(filters[filter]+(i++)));
        i2c.write(0x00);
        i2c.stop();
        address++;
    }
}

void dsp_set_filter(int8_t f)
{
    current_filter = f;
    if(f >= 0) // fixed filter bandwidth
    {
        if(mode == MODE_AM)
        {
            // workaround for AM (?)
            for(uint8_t i=0; i<16; i++)
                dsp_write_coeff(i, f);
            return;
        }

        // write the FIR filter coefficients into $15 filter bank
        dsp_write_coeff(15, f);

        i2c.start(0x38 | I2C_WRITE);
        i2c.write(0x01);
        i2c.write(0x01);
        i2c.write(0xA2); // TDSP1_X_CIBW_1_FirCtlFix
        i2c.write(0x00);
        i2c.write(0x00);
        i2c.write(0x0F); // $15 filter
        i2c.stop();

        i2c.start(0x38 | I2C_WRITE);
        i2c.write(0x01);
        i2c.write(0x01);
        i2c.write(0xA5); // TDSP1_X_CIBW_4_FirCtlFix
        i2c.write(0x00);
        i2c.write(0x00);
        i2c.write(0x0F); // $15 filter
        i2c.stop();

        i2c.start(0x38 | I2C_WRITE);
        i2c.write(0x01);
        i2c.write(0x01);
        i2c.write(0xA3); // TDSP1_X_CIBW_1_pFirCtl
        i2c.write(0x00);
        i2c.write(0x01);
        i2c.write(0xA2); // TDSP1_X_CIBW_1_FirCtlFix
        i2c.stop();

        i2c.start(0x38 | I2C_WRITE);
        i2c.write(0x01);
        i2c.write(0x01);
        i2c.write(0xA6); // TDSP1_X_CIBW_4_pFirCtl
        i2c.write(0x00);
        i2c.write(0x01);
        i2c.write(0xA5); // TDSP1_X_CIBW_4_FirCtlFix
        i2c.stop();

    }
    else if(mode == MODE_FM) // adaptive filter bandwidth
    {
        for(uint8_t i=0; i<16; i++)
            dsp_write_coeff(i, adaptive_filters_set[i]);

        i2c.start(0x38 | I2C_WRITE);
        i2c.write(0x01);
        i2c.write(0x01);
        i2c.write(0xA3); // TDSP1_X_CIBW_1_pFirCtl
        i2c.write(0x00);
        i2c.write(0x01);
        i2c.write(0xA1); // TDSP1_X_CIBW_1_FirCtl
        i2c.stop();

        i2c.start(0x38 | I2C_WRITE);
        i2c.write(0x01);
        i2c.write(0x01);
        i2c.write(0xA6); // TDSP1_X_CIBW_4_pFirCtl
        i2c.write(0x00);
        i2c.write(0x01);
        i2c.write(0xA4); // TDSP1_X_CIBW_4_FirCtl
        i2c.stop();
    }
}

void dsp_read_rds()
{
    uint8_t buffer[2], status, current_pi_count = 0;
    i2c.start(0x38 | I2C_WRITE);
    i2c.write(0x00);
    i2c.write(0x00);
    i2c.write(0x30);
    i2c.restart(0x38 | I2C_READ);
    i2c.read(false);
    status = i2c.read(true);
    i2c.stop();

    i2c.start(0x38 | I2C_WRITE);
    i2c.write(0x00);
    i2c.write(0x00);
    i2c.write(0x31);
    i2c.restart(0x38 | I2C_READ);
    buffer[0] = i2c.read(false);
    buffer[1] = i2c.read(true);
    i2c.stop();
    switch(status & B11111100)
    {
    case 0x00: // fast PI mode block
    case 0x80: // block A
    case 0x90: // block C'
        pi_buffer[pi_pos] = ((buffer[0] << 8) | buffer[1]);
        for(uint8_t i=0; i<PI_BUFFER_SIZE; i++)
            if(pi_buffer[i]==pi_buffer[pi_pos])
                current_pi_count++;

        if(current_pi_count == 2 && !pi_checked)
        {
            Serial.print('P');
            serial_hex(pi_buffer[pi_pos] >> 8);
            serial_hex(pi_buffer[pi_pos] & 0xFF);
            Serial.print("?\n");
        }
        else if(current_pi_count > 2)
        {
            Serial.print('P');
            serial_hex(pi_buffer[pi_pos] >> 8);
            serial_hex(pi_buffer[pi_pos] & 0xFF);
            Serial.print('\n');
            pi_checked = true;
        }
        pi_pos = (pi_pos+1)%PI_BUFFER_SIZE;
        break;
    case 0x84: // block B
        // we will wait for block C & D before sending anything to the serial
        rds_buffer[0] = buffer[0];
        rds_buffer[1] = buffer[1];
        rds_status_buffer = status&B11;
        rds_status_buffer |= B111100;
        rds_timer = millis();
        break;
    case 0x88: // block C
        rds_buffer[2] = buffer[0];
        rds_buffer[3] = buffer[1];
        rds_status_buffer &= B0011;
        rds_status_buffer |= (status&B11) << 2;
        break;
    case 0x8C: // block D
        // is this block related to the block B from buffer?
        if((millis()-rds_timer) < 50)
        {
            rds_status_buffer &= B001111;
            rds_status_buffer |= (status&B11) << 4;
            Serial.print('R');
            serial_hex(rds_buffer[0]);
            serial_hex(rds_buffer[1]);
            serial_hex(rds_buffer[2]);
            serial_hex(rds_buffer[3]);
            serial_hex(buffer[0]);
            serial_hex(buffer[1]);
            serial_hex(rds_status_buffer);
            Serial.print('\n');
        }
        break;
    }
}

void dsp_set_deemphasis(uint8_t d)
{
    i2c.start(0x38 | I2C_WRITE);
    i2c.write(0x03);
    i2c.write(0x11);
    i2c.write(0xD7);
    switch (d)
    {
    case 0: // 50us
        i2c.write(0x02);
        i2c.write(0xC0);
        i2c.write(0x04);
        i2c.write(0xE4);
        i2c.write(0x00);
        i2c.write(0x85);
        break;
    case 1: // 75us
        i2c.write(0x01);
        i2c.write(0xF6);
        i2c.write(0x05);
        i2c.write(0xC3);
        i2c.write(0x00);
        i2c.write(0x85);
        break;
    case 2: // off
        i2c.write(0x07);
        i2c.write(0xFF);
        i2c.write(0x00);
        i2c.write(0x00);
        i2c.write(0x00);
        i2c.write(0x00);
        break;
    }
    i2c.stop();
}

void tune(boolean reset_rds_sync)
{
    i2c.start(0x38 | I2C_WRITE);
    i2c.write(0x00);
    i2c.write(0xFF);
    i2c.write(0xFF);
    i2c.restart(0xC4 | I2C_WRITE);
    i2c.write(0x80);
    i2c.write(CONTROL);
    i2c.write(PLL>>8);
    i2c.write(PLL&0xFF);
    i2c.write(DAA);
    i2c.write(AGC);
    i2c.write(BAND);
    i2c.stop();

    if(reset_rds_sync && !spectrum_flag)
    {
        i2c.start(0x38 | I2C_WRITE);
        i2c.write(0x00);
        i2c.write(0x00);
        i2c.write(0x35);
        i2c.write(0x00);
        i2c.write(0x60); // fast pi mode
        i2c.stop();
        pi_checked = false;
    }
    delay(4);
}

void tune_freq(uint32_t freq, boolean serial_print) // ***Modified by F4CMB***
{
    if ((freq>=55000) && (freq<=137000)) // FM BAND (extended)
    {
        if(freq % 50 || freq>108000 || spectrum_flag)
        {
            PLL = ((freq+10700)*2)/10;
            BAND = B00110001; // 5kHz step, fref=10kHz
        }
        else
        {
            // we use 50kHz step if possible, because
            // in other cases the audio output isn't clear
            PLL = ((freq+10700)*2)/100;
            BAND = B00100001; // 50kHz step, fref=100kHz
        }
    }
    else if ((freq>=100) && (freq<=1900)) // LW & MW BAND
    {
        BAND = B11101101;
        PLL = ((freq+10700)*20)/20;
    }
    else if ((freq>=1901) && (freq<=5899)) // AM SW 120m to 60m
    {
        BAND = B11010001;
        PLL = ((freq+10700)*16)/10;
    }
    else if ((freq>=5900) && (freq<=13870)) // AM SW 49m to 22m
    {
        BAND = B10110001;
        PLL = ((freq+10700)*10)/10;
    }
    else if ((freq>=13871) && (freq<=19020)) // AM SW 25m to 15m
    {
        BAND = B10010001;
        PLL = ((freq+10700)*8)/10;
    }
    else if ((freq>=19021) && (freq<=30000)) // AM SW 16m to 11m
    {
        BAND = B01110001;
        PLL = ((freq+10700)*6)/10;
    }
    else
        return;

    align(freq);
    tune(true);

    if(serial_print)
    {
        Serial.print('V');
        Serial.print(DAA&0x7F, DEC);
        Serial.print("\nT");
        Serial.print(get_current_freq(), DEC);
        Serial.print('\n');
    }
}

void mode_FM()
{
    mode = MODE_FM;
    dsp_write_data(FM);
    dsp_set_filter(-1);
}

void mode_AM()
{
    mode = MODE_AM;
    dsp_write_data(AM);
}

void spectrum(uint16_t step)
{
    uint8_t _CONTROL = CONTROL;
    uint16_t _PLL = PLL;
    uint8_t _DAA = DAA;
    uint8_t _AGC = AGC;
    uint8_t _BAND = BAND; // save current settings
    uint32_t freq = spectrum_start;

    spectrum_flag = true;
    tune_freq(freq, false);
    Serial.print('U');
    while(freq<=spectrum_end)
    {
        tune_freq(freq, false);
        Serial.print(get_current_freq(), DEC);
        Serial.print('=');
        Serial.print(dsp_query(0x03, 0x00, (mode==MODE_FM)?0x92:0x6E), DEC);
        Serial.print(',');
        freq += step;
    }
    Serial.print('\n');
    spectrum_flag = false;

    // restore previous settings
    CONTROL = _CONTROL;
    PLL = _PLL;
    DAA = _DAA;
    AGC = _AGC;
    BAND = _BAND;
    tune(true);
}

void serial_hex(uint8_t val)
{
    Serial.print(val >> 4 & 0xF, HEX);
    Serial.print(val & 0xF, HEX);
}

uint32_t get_current_freq()
{
    if(BAND == B00100001)
        return 100*(uint32_t)PLL/2-10700;
    else if(BAND == B00110001)
        return 10*(uint32_t)PLL/2-10700;
    else if(BAND == B11101101)
        return 20*(uint32_t)PLL/20-10700;
    else if(BAND == B11010001)
        return 10*(uint32_t)PLL/16-10700;
    else if(BAND == B10110001)
        return 10*(uint32_t)PLL/10-10700;
    else if(BAND == B10010001)
        return 10*(uint32_t)PLL/8-10700;
    else if(BAND == B01110001)
        return 10*(uint32_t)PLL/6-10700;
    else
        return 0;
}

/* IR support by F4CMB */
void sendcode(uint32_t code)
{
    cli();
    start();
    for (int i = 19; i >=0; i--)
    {
        if (code>>i &1 == 1) one();
        else zero();
    }
    delayMicroseconds (15000);
    start();
    for (int i = 19; i >=0; i--)
    {
        if (code>>i &1 == 1) one();
        else zero();
    }
    sei();
}

void carrier(int time)
{
    for (int i=0; i<(time/30); i++)
    {
        digitalWrite(IR_PIN, HIGH); // approx 40 KHz oscillator
        delayMicroseconds(12);
        digitalWrite(IR_PIN, LOW);
        delayMicroseconds(12);
    }
}

void start()
{
    carrier(2000);
    delayMicroseconds(600);
}

void one()
{
    carrier(1200);
    delayMicroseconds(600);
}

void zero()
{
    carrier(600);
    delayMicroseconds(600);
}

void align(uint32_t freq)
{
    // alignment of the antenna circuit
    // these values are individual for each tuner!
    if(freq>=107300)
        DAA = 52;
    else if(freq>=104500)
        DAA = 53;
    else if(freq>=100400)
        DAA = 54;
    else if(freq>=97500)
        DAA = 55;
    else if(freq>=95600)
        DAA = 56;
    else if(freq>=92900)
        DAA = 57;
    else if(freq>=90500)
        DAA = 58;
    else if(freq>=87800)
        DAA = 59;
    else if(freq>=87000)
        DAA = 60;
    else if(freq>=85000)
        DAA = 61;
    else if(freq>=84000)
        DAA = 62;
    else if(freq>=83000)
        DAA = 63;
    else if(freq>=78000)
        DAA = 64;
    else if(freq>=76000)
        DAA = 65;
    else if(freq>=74000)
        DAA = 66;
    else if(freq>=73000)
        DAA = 67;
    else if(freq>=70000)
        DAA = 69;
    else
        DAA = 70;
}

